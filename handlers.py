import logging
import sqlite3
from telegram import ChatAction, ParseMode
from telegram.ext import ConversationHandler
import time

from utils import *

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(funcName)s - %(message)s',
                    level = logging.INFO,
                    filename = 'tgbot.log'
                    )
    

def greet_user(update, context):
    text_to_user = '''–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –æ—Ç–¥—ã—Ö. –Ø –±—É–¥—É –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, \
–Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –ø–∏–Ω–∞—Ç—å –∏ —Ç.–ø. –ù–µ –æ–±–∏–∂–∞–π—Ç–µ—Å—å –Ω–∞ –º–µ–Ω—è, –ª–∞–¥–Ω–æ? –í—Å—ë —ç—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∂–µ \
–±–ª–∞–≥–∞)'''
    context.bot.send_message(chat_id=update.message.chat_id, text=text_to_user)    
    context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
    time.sleep(3)
    context.bot.send_message(
        chat_id=update.message.chat_id, 
        text='–í—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å? –ò–ª–∏ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª –∫—Ç–æ-—Ç–æ –∏–∑ –≤–∞—à–µ–π —Å–µ–º—å–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥)?', 
        reply_markup=get_inline_keyboard()
        )

def initial_data_start(update, context):
    query = update.callback_query
    data = get_initial_data(update)
    write_initial_data_to_base(data)
    query.message.reply_text('–ù–∞ —á—Ç–æ –∫–æ–ø–∏–º?')
    return 'purpose'

def get_purpose(update, context):
    write_entry_to_base('purpose', update.message.text, update.message.chat_id)
    update.message.reply_text(
        '–ö–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä, 1000 –¥–æ–ª–ª–∞—Ä–æ–≤... –∏–ª–∏ 2000 –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö —Ä—É–±–ª–µ–π ü§î')    
    return 'purpose_sum'

def get_purpose_sum(update, context):      
    # TODO –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å. –ü—Ä–æ–≤–µ—Ä—è—Ç—å, —á—Ç–æ–±—ã –±—ã–ª–æ —Ü–∏—Ñ—Ä–∞ –∏ –æ–¥–Ω–æ –∏–ª–∏ –¥–ª—è —Å–ª–æ–≤–∞
    if len(update.message.text.split()) == 2 or len(update.message.text.split()) == 3:
        for word in update.message.text.split():
            if word.isdigit() == True:                
                write_entry_to_base(
                    'purpose_sum', int(word), update.message.chat_id)
            parse_purpose_sum(word, update.message.chat_id)
    else: 
        update.message.reply_text('''–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é... \
–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä, 1000 –¥–æ–ª–ª–∞—Ä–æ–≤. –¶–∏—Ñ—Ä—É –ø–∏—à–∏—Ç–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤''')
        return 'purpose_sum'
    parse_purpose_sum(update.message.text, update.message.chat_id)
    update.message.reply_text('–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –µ—Ö–∞—Ç—å?')
    return 'purpose_date'

def get_purpose_date(update, context):    
    write_entry_to_base('purpose_date', update.message.text, update.message.chat_id)
    update.message.reply_text('–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –µ—Å—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?')
    return 'current_sum'

def get_current_sum(update, context):    
    write_entry_to_base('current_sum', update.message.text, update.message.chat_id)
    update.message.reply_text('–í –∫–∞–∫–∏–µ –¥–Ω–∏ —É –≤–∞—Å –ø—Ä–∏—Ö–æ–¥ –¥–µ–Ω–µ–≥?')
    return 'payday_dates'

def get_payday_dates(update, context):   
    context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
    dates = user_entry_date_handler(update.message.text, update)
    if dates == 'payday_dates':
        return 'payday_dates'
    write_entry_to_base('payday_dates', dates, update.message.chat_id)
    update.message.reply_text('–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?')
    return 'every_month_purp_sum'

def get_every_month_purp_sum(update, context):    
    write_entry_to_base('every_month_purp_sum', update.message.text, update.message.chat_id)
    update.message.reply_text('–°–ø–∞—Å–∏–±–æ, –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω—è–ª.')
    context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)    
    password = password_generation()
    write_entry_to_base('secret_key', password, update.message.chat_id)
    update.message.reply_text('–ü–∞—Ä–æ–ª—å –≤–∞—à–µ–π —Å–µ–º—å–∏: ' + password)
    update.message.reply_text('–ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫—É, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≤–º–µ—Å—Ç–µ —Å–æ–±–∏—Ä–∞–µ—Ç–µ –¥–µ–Ω—å–≥–∏, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—Ç—É –∏ –≤–∏–¥–µ—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é.')
    return ConversationHandler.END   

def dontknow(update, context):
    update.message.reply_text('–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤–≤–∏–¥—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏')
 
##################################################

def invited_user_conv(update, context):
    query = update.callback_query        
    query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å–µ–º—å–∏')
    return 'secret_key'

def get_password(update, context):
    pass_list = list_from_base_column('secret_key') # [('-yGIB7rf?NKU0Dk',), (None,)]
    for item in pass_list:
        if item[0] == update.message.text:            
            write_entry_to_base('secret_key', update.message.text, update.message.chat_id)
            update_invited_user_data(update.message.chat_id) # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
            update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            break
        else: 
            update.message.reply_text('–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
            return 'secret_key'
    return ConversationHandler.END

##################################################

def start_enter_pay_sum(update, context):
    unset(update, context)
    query = update.callback_query
    query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    return 'payed_summ'

def get_payed_summ(update, context):
    payed_summ = update.message.text    
    currency = get_data_cell('purp_currency', update.message.chat_id)
    context.user_data['currency'] = currency
    every_month_purp_sum = get_data_cell('every_month_purp_sum', update.message.chat_id)
    charges = get_data_cell('charges', update.message.chat_id)
    cashflow = int(payed_summ) - charges
    if cashflow < 100:
        little_sum = get_little_sum(cashflow)
        text = f'''–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏—Ö–æ–¥. –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ª–æ–∂–∏—Ç—å \
{str(little_sum)}{currency}. –ï—Å–ª–∏ –ø–æ–¥–Ω–∞–ø—Ä—è—á—å—Å—è, –º–æ–∂–Ω–æ –≤—ã–∫—Ä–æ–∏—Ç—å –∏ {every_month_purp_sum} {currency}. \
–ö–∞–∫—É—é —Å—É–º–º—É –æ—Ç–ª–æ–∂–∏–º?'''
        update.message.reply_text(
            text, 
            reply_markup=pay_day_inline_keyboard3(str(little_sum), every_month_purp_sum, currency)
            )
        context.user_data.update({'little_sum': little_sum})
    else:        
        update.message.reply_text(
            f'–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ª–æ–∂–∏—Ç—å {every_month_purp_sum} {currency} –∏–ª–∏ –±–æ–ª—å—à–µ. \
–°–∫–æ–ª—å–∫–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º?', 
            reply_markup=pay_day_inline_keyboard2(every_month_purp_sum, currency))
    return 'how_much_saving'

def get_saving_sum(update, context):    
    query = update.callback_query
    every_month_purp_sum = get_data_cell('every_month_purp_sum', query.message.chat_id)  # str
    if query.data == every_month_purp_sum or query.data == '2':    
        current_sum = get_data_cell('current_sum', query.message.chat_id)   # int   
        current_sum = current_sum + int(every_month_purp_sum)        
    if query.data == '1':        
        little_sum = context.user_data['little_sum']
        current_sum = get_data_cell('current_sum', query.message.chat_id)   # int   
        current_sum = current_sum + int(little_sum)


    write_entry_to_base('current_sum', current_sum, query.message.chat_id) 
    context.user_data.update({'current_sum': current_sum})   
    query.message.reply_text('–û—Ç–ª–∏—á–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏–Ω—è–ª!')

    resume(update, context)
    return ConversationHandler.END
    
 
    
#########################################################

def get_other_sum(update, context):
    query = update.callback_query        
    query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ª–æ–∂–∏—Ç–µ')    
    return 'enter_sum'

def get_other_saving_sum(update, context):   
    saving_sum = update.message.text
    current_sum = get_data_cell('current_sum', update.message.chat_id)   # int   
    current_sum = current_sum + int(saving_sum)
    write_entry_to_base('current_sum', current_sum, update.message.chat_id) 
    context.user_data.update({'current_sum': current_sum})      
    update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏–Ω—è–ª!')    
    
    resume(update, context)
    return ConversationHandler.END
    
###########################################################

def pass_current_month(update, context):
    query = update.callback_query
    current_sum = get_data_cell('current_sum', query.message.chat_id)   # int   
    context.user_data.update({'current_sum': current_sum})      
    query.message.reply_text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏–Ω—è–ª!')
    resume(update, context)
    return ConversationHandler.END    


# TODO –°–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π


def set_delay(update, context): 
    query = update.callback_query
    chat_id = query.message.chat_id    
    # new_job = context.job_queue.run_repeating(ask_question, 10, context=chat_id)        
    new_job = context.job_queue.run_once(ask_question, datetime.timedelta(seconds=10.0), context=chat_id)        
    context.chat_data['job'] = new_job
    query.message.reply_text('–û–∫, —Å–ø—Ä–æ—à—É –ø–æ–∑–∂–µ')    
    print(context.user_data)

def unset(update, context):
    # query = update.callback_query
    """Remove the job if the user changed their mind."""
    if 'job' not in context.chat_data:
        # query.message.reply_text('You have no active timer')
        return

    job = context.chat_data['job']
    print(job)
    job.schedule_removal()
    del context.chat_data['job']
    # query.message.reply_text('Timer successfully unset!')

def ask_question(context):
    """Send the alarm message."""
    job = context.job
    context.bot.send_message(
        job.context, 
        text='–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—É?', 
        reply_markup=pay_day_inline_keyboard1()
        )

# –ö–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å? –í–ö–∞–∫ –º–Ω–µ –±—ã—Ç—å —Å –≤–∞–ª—é—Ç–∞–º–∏? 
# –ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å? –ö–∞–∫ –º–Ω–µ –±—ã—Ç—å? –ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è? –ö–∞–∫ –º–Ω–µ –±—ã—Ç—å —Å –≤–∞–ª—é—Ç–∞–º–∏? 

# TODO –°–¥–µ–ª–∞—Ç—å, –∫–æ–≥–¥–∞ –≤–Ω–∞—á–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É, —á—Ç–æ–±—ã 
# –æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
